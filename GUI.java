
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.file.Path;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author suraj
 */
public class GUI extends javax.swing.JFrame {

    ArrayList<String> imgNames;
    File makeDirectory;
    JFileChooser chooser = new JFileChooser();
    private static int count = 0;
    Timer timer;
    ImageIcon imageIcon;
    private ActionListener action = new ActionListener(){
    	public void actionPerformed(ActionEvent ae){
    		ImageIcon[] img = new ImageIcon[imgNames.size()];
    		for(int i=0;i < img.length;i++){
    			img[i] = new ImageIcon(imgNames.get(i));
    		}
    		if(count < img.length){
    			picLabel.setIcon(img[count]);
    			count ++;
    		}
    		if(count == img.length){
    			System.exit(0);
    		}
    		
    	}
    	
    };
    
    
    /**
     * Creates new form NewJFrame
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        nextImgButton = new javax.swing.JButton();
        addImgButton = new javax.swing.JButton();
        imgList = new java.awt.List();
        picLabel = new javax.swing.JLabel();
        startMovieButton = new javax.swing.JButton();
        Menubar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        NewFileMenu = new javax.swing.JMenuItem();
        OpenMenu = new javax.swing.JMenuItem();
        SaveMenu = new javax.swing.JMenuItem();
        QuitMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

    
        picLabel.setSize(300,300);
        picLabel.setBounds(300, 300, 300, 300);
        nextImgButton.setText("Next_Img");

        addImgButton.setText("Add_Img");
        addImgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImgButtonActionPerformed(evt);
            }
        });

        startMovieButton.setText("StartMovie");
        startMovieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMovieButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        NewFileMenu.setText("New ");
        NewFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(NewFileMenu);

        OpenMenu.setText("Open");
        OpenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuActionPerformed(evt);
            }
        });
        fileMenu.add(OpenMenu);

        SaveMenu.setText("Save");
        fileMenu.add(SaveMenu);

        QuitMenu.setText("Quit");
        fileMenu.add(QuitMenu);

        Menubar.add(fileMenu);

        editMenu.setText("Edit");
        Menubar.add(editMenu);

        setJMenuBar(Menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            
            .addGroup(layout.createSequentialGroup()
               
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                
                .addGap(28, 28, 28)
               
                .addGap(0, 453, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imgList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(startMovieButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addImgButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextImgButton))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nextImgButton)
                            .addComponent(addImgButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startMovieButton)
                        .addGap(6, 6, 6)
                        .addComponent(imgList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(picLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        )))
        );

        pack();
    }// </editor-fold>                        

    private void OpenMenuActionPerformed(java.awt.event.ActionEvent evt) {                                         
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "JPG & GIF Images", "jpg", "gif");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(getParent());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: "
                    + chooser.getSelectedFile().getName());
        }
         
    }                                        

    private void NewFileMenuActionPerformed(java.awt.event.ActionEvent evt) {                                            
        String folderName = null;
        try {
            folderName = JOptionPane.showInputDialog(rootPane, "Project Name", "New Project",
                    JOptionPane.PLAIN_MESSAGE);
        } catch (NullPointerException e) {
        }
        // gives name typed in dialog box
        makeDirectory = new File(folderName);
        boolean mkdirs = makeDirectory.mkdirs();
        if (!mkdirs) {
            JOptionPane.showMessageDialog(null, "Folder Already Exists\n" + "Please Change the name");
        } else {
            imgNames = new ArrayList<String>();

        }
    }                                           

    private void addImgButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "JPG & GIF Images", "jpg", "gif");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(getParent());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        }
        Path fileName = chooser.getSelectedFile().toPath();
        String newFilePath;
        newFilePath = makeDirectory.getAbsolutePath() + "\\" + chooser.getSelectedFile().getName();
        try {
            FileInputStream from = new FileInputStream(fileName.toString());
            FileOutputStream to = new FileOutputStream(newFilePath);
            int byteread ;
            byte[] buffer = new byte[4096];
            while ((byteread = from.read(buffer)) != -1) {
                to.write(buffer);
            }
            // adds to path to array list
            imgNames.add(newFilePath);
            from.close();
            to.close();
        } catch (Exception e) {
        }
    }                                            

    private void startMovieButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    	timer = new Timer( 2000 , action);
    	timer.start();
    	
    }                                                

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuBar Menubar;
   
    private javax.swing.JMenuItem NewFileMenu;
    private javax.swing.JMenuItem OpenMenu;
    private javax.swing.JMenuItem QuitMenu;
    private javax.swing.JMenuItem SaveMenu;
    private javax.swing.JButton addImgButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private java.awt.List imgList;
    private javax.swing.JButton nextImgButton;
    private javax.swing.JLabel picLabel;
    private javax.swing.JButton startMovieButton;
    // End of variables declaration                   

    private String getPath(int count) {
        return imgNames.get(count);
    }
}
